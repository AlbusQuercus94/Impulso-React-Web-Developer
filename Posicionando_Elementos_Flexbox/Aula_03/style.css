/* PARTE 01 - FLEX GROW */
/*Nessa aula é um estudo com as propriedades relacionadas aos itens flexs.
O flex-grow define a proporção que os elementos irão crescer. Não fuciona em containers com alinhamento pela propriedade justify content.
Os valores para a propriedade flex grow são apenas números.*/

#parte01{
    border: 5px solid black;
    width: 700px;
    padding: 5px;
    margin: 20px 0px;
}


#parte01 .flex-container{
    display: flex;
    margin: 0;
    width: 600px;
    background: burlywood;
}

#parte01 .flex-item{
    margin: -1px;
    padding: 0px;
    border: 3px solid cadetblue;
    color: rgb(4, 112, 112);
    text-align: center;
}

#parte01 .flex-grow .item01 {
    flex-grow: 4;
}

/*Aqui eu separei e agrupei os items para ficar mais fácil digitar o código.*/

#parte01 .flex-grow .item02,
#parte01 .flex-grow .item03,
#parte01 .flex-grow .item04,
#parte01 .flex-grow .item05{
    flex-grow: 2;
}

/*Adendo: o justify content não altera em nada o conteúdo do flex container. O que ocorre é o oposto do que eu pensava: o flex grow desabilita o justify content e não o inverso.*/
#parte01 .flex-grow-justify-content{
    justify-content: center;
}

#parte01 .flex-grow-justify-content .item01{
    flex-grow: 4;
}

#parte01 .flex-grow-justify-content .item02,
#parte01 .flex-grow-justify-content .item03,
#parte01 .flex-grow-justify-content .item04,
#parte01 .flex-grow-justify-content .item05{
    flex-grow: 2;
}

#parte01 .flex-grow-justify-content02{
    justify-content: center;
    flex-grow: 0;
}

/* ------------------------------------------------------ */
/* PARTE 2 - FLEX BASIS */
/*Define o tamanho do item antes do espaço ser distribuido. Em outras palavras: primeiro define-se o tamanho do item, esse item pega o seu conteúdo e determina-o como a base, e quando houver a distribuição do espaço, o primeiro valor vai ser mantido mais o espaçamento feito.*/

/*Os valores possíveis para essa propriedade são: 
    auto: o tamanho é determinado proporcialmente ao conteúdo do item;
    (qualquer valor númerico com qualquer únidade possível: px, em, %)
    quando o valor determinado é zero (0) a relação é a mesma com o flex-grow*/

/*Vamos pra a pratica para fixar*/

#parte02{
    border: 5px solid black;
    width: 700px;
    padding: 5px;
    margin: 20px 0px;
}


#parte02 .flex-container{
    display: flex;
    margin: 0;
    width: 600px;
    background: burlywood;
}

#parte02 .flex-item{
    margin: -1px;
    padding: 0px;
    border: 3px solid cadetblue;
    color: rgb(4, 112, 112);
    text-align: center;
    
}


/*Aqui, mesmo tendo espaço, o valor adicional vai tentar manter a largura máxima do item.*/

/*O flex item sem o flex grow limita o seu conteúdo ao tamanho do flex basis.*/

/*Contudo, ao adicionar um valor ao flex grow, o item tem sua largura acrescida até que ocupe o espaço do container todo. Ao chegar aos fim do tamanho do container, a largura para de crescer.*/

#parte02 .flex-basis .item01,
#parte02 .flex-basis .item02,
#parte02 .flex-basis .item03,
#parte02 .flex-basis .item04,
#parte02 .flex-basis .item05{
    flex-grow: 1;
    flex-basis: 100px;
}

/*Define um tamanho para item flex*/
#parte02 .flex-basis-numeral .item01{
    flex-basis: 50px;
    flex-grow: 1;
}
#parte02 .flex-basis-numeral .item02{
    flex-basis: 120px;
}

#parte02 .flex-basis-numeral .item03{
    flex-basis: 120px;
}

#parte02 .flex-basis-numeral .item04{
    flex-basis: 100px;
}

#parte02 .flex-basis-numeral .item05{
    flex-basis: 80px;
}

/*Flex basis Zerado*/

#parte02 .flex-basis-zero .item01{
    flex-basis: 50px;
}
#parte02 .flex-basis-zero .item02{
    flex-basis: 120px;
}

#parte02 .flex-basis-zero .item03{
    flex-basis: 120px;
}

#parte02 .flex-basis-zero .item04{
    flex-basis: 100px;
}

#parte02 .flex-basis-zero .item05{
    flex-basis: 80px;
}

/*TESTES EM NOME DA CIÊNCIA*/
#parte02 .flex-basis-numeral3{
    width: 100px;
}
/*Quando o container tem um tamanho menor que o tamanho do item, o flex-basis faz o item ter no máximo a largura do container.*/
#parte02 .flex-basis-numeral3 .item01{
    flex-basis: 200px;
}

#parte02 .flex-basis-numeral4{
    width: 100px;
}
/*A diferença entre este e o anterior é que este daqui distribui melhor o conteúdo interno, enquanto no exemplo anterior parece que o conteúdo está comprimido.*/
#parte02 .flex-basis-numeral4 .item01{
    flex-basis: 0;
}

/* ------------------------------------------- */
/* PARTE EXTRA */
#parteextra{
    border: 5px solid black;
    width: 700px;
    padding: 5px;
    margin: 20px 0px;
}


#parteextra .flex-container{
    display: flex;
    margin: 0;
    width: 600px;
    background: burlywood;
}

#parteextra .flex-item{
    margin: -1px;
    padding: 0px;
    border: 3px solid cadetblue;
    color: rgb(4, 112, 112);
    text-align: center;
}
#parteextra .flex-shrink .item01{
    width: 348px;
    /* flex-shrink: 5; */
}

#parteextra .flex-shrink .item02{
    width: 252px;
    /* flex-shrink: 3; */
}

#parteextra .flex-shrink2 .item01,
#parteextra .flex-shrink2 .item02,
#parteextra .flex-shrink2 .item03{
    width: 150px;
}
#parteextra .flex-shrink2 .item04{
    width: 333px;
}

/* ------------------------------------------- */


/* PARTE 3 - FLEX SHRINK */
/*O flex shrink é o oposto do flex grow. Se o grow você determina o a proporção de crescimento do item, o flex shrink determina a proporção de diminuiçãio.*/
/*Assim como o grow, o flex shrink só tem valores numéricos.*/

#parte03{
    border: 5px solid black;
    width: 700px;
    padding: 5px;
    margin: 20px 0px;
}


#parte03 .flex-container{
    display: flex;
    padding: 10px;
    margin: 0;
    width: 600px;
    background: burlywood;
}

#parte03 .flex-item{
    margin: -1px;
    padding: 0px;
    border: 3px solid cadetblue;
    color: rgb(4, 112, 112);
    text-align: center;
    flex-grow: 1;
}

/*Quando o flex-shrink é igualado a zero, é a definição de que o item não pode diminuir de tamanho, fazendo com que os itens vazem do container*/
#parte03 .flex-shrink2 .flex-item{
    flex-basis: 100px;
    flex-shrink: 0;
}

#parte03 .flex-shrink-active .flex-item{
    flex-basis: 100px;
    flex-shrink: 2;
}
/*Para os itens deste container, todos a principio terão shrink 0, mas depois há alteração nos itens 2, 3 e 5.*/
#parte03 .flex-shrink-active2 .flex-item{
    flex-basis: 100px;
    flex-shrink: 0;
}

#parte03 .flex-shrink-active2 .item02{
    flex-basis: 100px;
    flex-shrink: 4;
}

#parte03 .flex-shrink-active2 .item03{
    flex-basis: 100px;
    flex-shrink: 8;
}

#parte03 .flex-shrink-active2 .item05{
    flex-basis: 100px;
    flex-shrink: 12;
}

/* ---------------------------------------------- */
/* PARTE 4 - FLEX  */
/*A propriedade Flex é uma abreviação das três anteriores. O valor do flex é dividido em 3 valores: grow, shrink e basis.*/
/*Pondo em prática*/

#parte04{
    border: 5px solid black;
    width: 700px;
    padding: 5px;
    margin: 20px 0px;
}


#parte04 .flex-container{
    display: flex;
    padding: 10px;
    margin: 0;
    width: 600px;
    background: burlywood;
}

#parte04 .flex-item{
    margin: -1px;
    padding: 0px;
    border: 3px solid cadetblue;
    color: rgb(4, 112, 112);
    text-align: center;
    flex-grow: 1;
}
/*Grow: 1; Shrink: 1; Basis: 0;*/
/*A proporção de crescimento é 1, a proporção de encolhimento também é 1, o tamanho base do tamanho é 0px*/
#parte04 .flex1 .flex-item{
    flex: 1 1 0;
}

/*Grow: 1; Shrink: 1; Basis: auto;*/
/*A proporção de crescimento é 1, a proporção de encolhimento também é 1, o tamanho base do tamanho é automática*/
#parte04 .flex2 .flex-item{
    flex: 1 1 auto;
}


/*Grow: 1; Shrink: 0; Basis: 0;*/
/*A proporção de crescimento é 1, o item não encolherá, o tamanho base do tamanho é 0px
Nesse exemplo, os itens tem quebra de linha nos espaços das palavras, alterando a altura para caber todo o conteúdo dentro do container.*/
#parte04 .flex3 .flex-item{
    flex: 1 0 0;
}

/*Grow: 1; Shrink: 0; Basis: auto;*/
/*A proporção de crescimento é 1, o item não encolherá, o tamanho base do tamanho é auto.
Por ter fator de crescimento e o basis auto, o item não tem quebra de linha, fazendo a largura ser o tamanho da linha do item, criando vazamento.*/
#parte04 .flex4 .flex-item{
    flex: 1 0 auto;
}

/*Grow: 0; Shrink: 1; Basis: 0;*/
/*Não sendo repetivo, aqui não temos proporção de crescimento, mas tem de encolhimento, fazendo com que o item quebre de linha o máximo possivel, deixando a largura como a maior palavra do conteúdo. */
#parte04 .flex5 .flex-item{
    flex: 0 1 0;
}

/*Grow: 0; Shrink: 1; Basis: auto;
Aqui o conteúdo vai tentar caber no container, uma vez que tem fator de redução. Então mesmo tendo como largura o auto, ele vai quebrar as linhas para se encaixar no container por conta do shrink.*/
#parte04 .flex6 .flex-item{
    flex: 0 1 auto;
}

/*Grow: 0; Shrink:01; Basis: 0;
Aqui ele encolhe os item sem necessidade, mesmo tendo espaço, ele vai se reduzir ao menor tamanho possivel.*/
#parte04 .flex7 .flex-item{
    flex: 0 0 0;
}

/*Grow: 0; Shrink: 0; Basis: auto;
Aqui */
#parte04 .flex8 .flex-item{
    flex: 0 0 auto;
}

/* ----------------------------------------------- */
/* PARTE 5 - ORDER */
/*É uma propriedade que trata da ordenação dos itens flex. O valor padrão é o 0.*/
/*É como uma etiqueta, que voce põe no item, determinando qual o número dele. A ordem dos números a serem apresentados é em ordem crescente.*/
/*Caso tenha dois item com a mesma etiqueta, eles serão organizados em ordem de aparição.*/


#parte05{
    border: 5px solid black;
    width: 700px;
    padding: 5px;
    margin: 20px 0px;
}


#parte05 .flex-container{
    display: flex;
    padding: 10px;
    margin: 0;
    width: 600px;
    background: burlywood;
}

#parte05 .flex-item{
    margin: -1px;
    padding: 0px;
    border: 3px solid cadetblue;
    color: rgb(4, 112, 112);
    text-align: center;
    flex: 1 1 auto;
}

#parte05 .order-row-1 .item01,
#parte05 .order-row-1 .item02{
    order: 3;
}

#parte05 .order-row-1 .item03{
    order: 1;
}

#parte05 .order-row-1 .item04{
    order: -2;
}


#parte05 .order-column-0,
#parte05 .order-column-1{
    flex-direction: column;
}

#parte05 .order-column-1 .item01, 
#parte05 .order-column-1 .item02{
    order: 3;
}

#parte05 .order-column-1 .item03{
    order: 1;
}

#parte05 .order-column-1 .item04{
    order: 2;
}

/*Dependendo do flex-direction, a ordem pode ser revertida, caso o direction seja do tipo reverse.*/

#parte05 .order-row-reverse-1{
    flex-direction: row-reverse;
}

#parte05 .order-column-reverse-1{
    flex-direction: column-reverse;
}

#parte05 .order-row-reverse-1 .item01,
#parte05 .order-row-reverse-1 .item02,
#parte05 .order-column-reverse-1 .item01, 
#parte05 .order-column-reverse-1 .item02{
    order: 3;
}

#parte05 .order-row-reverse-1 .item03,
#parte05 .order-column-reverse-1 .item03{
    order: 1;
}

#parte05 .order-row-reverse-1 .item04,
#parte05 .order-column-reverse-1 .item04{
    order: -2;
}


/* ----------------------------------- */
/* PARTE 06 - ALIGN SELF */
/*É a propriedade que trata do alinhamento do item em um flexs container. Só funciona se o flex container não tiver align. Os valores permitidos na proprieade não: */
/*      auto: valor padrão, segue a determinação do align do  container;
        flex-start: alinha ao inicio do container;
        flex-end: alinha ao fim do container;
        center: alinha ao centro;
        stretch: ocupa todo o espaço relativo do item;
        baseline: alinha-se de acordo com a linha de base
*/

#parte06{
    border: 5px solid black;
    width: 700px;
    padding: 5px;
    margin: 20px 0px;
}


#parte06 .flex-container{
    display: flex;
    padding: 10px;
    margin: 0;
    width: 600px;
    height: 100px;
    background: burlywood;
}

#parte06 .flex-item{
    margin: 1px;
    padding: 0px;
    border: 3px solid cadetblue;
    color: rgb(4, 112, 112);
    text-align: center;
    flex: 1;
    background: rgb(168, 255, 81);
}

/*Definição dos align items dos containers*/

#parte06 .align-self-2{
    align-items: center;
}

#parte06 .align-self-3{
    align-items: flex-start;
}

#parte06 .align-self-4{
    align-items: flex-end;
}

/*Definição dos align self de cada elemento por container.*/

#parte06 .align-self-1 .item01,
#parte06 .align-self-2 .item01,
#parte06 .align-self-3 .item01,
#parte06 .align-self-4 .item01{
    align-self: auto;
}

#parte06 .align-self-1 .item02,
#parte06 .align-self-2 .item02,
#parte06 .align-self-3 .item02,
#parte06 .align-self-4 .item02{
    align-self: flex-start;
}

#parte06 .align-self-1 .item03,
#parte06 .align-self-2 .item03,
#parte06 .align-self-3 .item03,
#parte06 .align-self-4 .item03{
    align-self: flex-end;
}

#parte06 .align-self-1 .item04,
#parte06 .align-self-2 .item04,
#parte06 .align-self-3 .item04,
#parte06 .align-self-4 .item04{
    align-self: center;
}

#parte06 .align-self-1 .item05,
#parte06 .align-self-2 .item05,
#parte06 .align-self-3 .item05,
#parte06 .align-self-4 .item05{
    align-self: stretch;
}

#parte06 .align-self-1 .item06,
#parte06 .align-self-2 .item06,
#parte06 .align-self-3 .item06,
#parte06 .align-self-4 .item06{
    align-self: baseline;
}

